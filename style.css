/*!
Theme Name:   Timber Boilerplate Theme
Theme URI:    https://github.com/certainlyakey/timber-boilerplate
Description:  This is a boilerplate theme using Timber
Version:      1.0
Author:       Aleksandr Beliaev
Text Domain:  theme_domain
Domain Path:  /languages/
*/@import url("https://fonts.googleapis.com/css?family=Open+Sans:300,400,600");.u-screenreader-text{position:absolute;overflow:hidden;clip:rect(0 0 0 0);height:1px;width:1px;margin:-1px;padding:0;border:none;white-space:nowrap}html:not(.no-js) .js-hidden-if-js-on{display:none}.u-inner-layer{position:relative;z-index:1}.u-nowrap{white-space:nowrap}.js-hidden,.u-hidden{display:none}
/*! normalize.css v3.0.3 | MIT License | github.com/necolas/normalize.css */html{font-family:sans-serif;-ms-text-size-adjust:100%;-webkit-text-size-adjust:100%}body{margin:0}article,aside,details,figcaption,figure,footer,header,hgroup,main,menu,nav,section,summary{display:block}audio,canvas,progress,video{display:inline-block;vertical-align:baseline}audio:not([controls]){display:none;height:0}[hidden],template{display:none}a{background-color:transparent}a:active,a:hover{outline:0}abbr[title]{border-bottom:1px dotted}b,strong{font-weight:700}dfn{font-style:italic}h1{font-size:2em;margin:.67em 0}mark{background:#ff0;color:#000}small{font-size:80%}sub,sup{font-size:75%;line-height:0;position:relative;vertical-align:baseline}sup{top:-.5em}sub{bottom:-.25em}img{border:0}svg:not(:root){overflow:hidden}figure{margin:1em 40px}hr{box-sizing:content-box;height:0}pre{overflow:auto}code,kbd,pre,samp{font-family:monospace,monospace;font-size:1em}button,input,optgroup,select,textarea{color:inherit;font:inherit;margin:0}button{overflow:visible}button,select{text-transform:none}button,html input[type=button],input[type=reset],input[type=submit]{-webkit-appearance:button;cursor:pointer}button[disabled],html input[disabled]{cursor:default}button::-moz-focus-inner,input::-moz-focus-inner{border:0;padding:0}input{line-height:normal}input[type=checkbox],input[type=radio]{box-sizing:border-box;padding:0}input[type=number]::-webkit-inner-spin-button,input[type=number]::-webkit-outer-spin-button{height:auto}input[type=search]{-webkit-appearance:textfield;box-sizing:content-box}input[type=search]::-webkit-search-cancel-button,input[type=search]::-webkit-search-decoration{-webkit-appearance:none}fieldset{border:1px solid silver;margin:0 2px;padding:.35em .625em .75em}legend{border:0;padding:0}textarea{overflow:auto}optgroup{font-weight:700}table{border-collapse:collapse;border-spacing:0}td,th{padding:0}dd,dl,figure,h1,h2,h3,h4,h5,h6,li,ol,p,ul{margin:0;padding:0}h1,h2,h3,h4,h5,h6{font-weight:400;font-size:100%}ul{list-style:none}a:focus{outline:none}html{box-sizing:border-box}*,:after,:before{box-sizing:inherit}ol,ul{list-style-position:inside}textarea{max-width:100%;resize:vertical}fieldset{border:none;margin:0;padding:0}select{color:#000}iframe{border:none}body{font-family:Helvetica Neue,Helvetica,Arial,sans-serif;font-size:16px;line-height:1.6;background-color:#fff}a{color:#ee2d29;text-decoration:none}.s-textcontent>blockquote{font-style:italic}.s-textcontent>ol:not(:only-child),.s-textcontent>p:not(:only-child),.s-textcontent>ul:not(:only-child){margin-top:10px;margin-bottom:10px}.s-textcontent>h2:first-child,.s-textcontent>h3:first-child,.s-textcontent>h4:first-child,.s-textcontent>h5:first-child,.s-textcontent>h6:first-child,.s-textcontent>ol:first-child,.s-textcontent>p:first-child,.s-textcontent>ul:first-child{margin-top:0}.s-textcontent>h2:last-child,.s-textcontent>h3:last-child,.s-textcontent>h4:last-child,.s-textcontent>h5:last-child,.s-textcontent>h6:last-child,.s-textcontent>ol:last-child,.s-textcontent>p:last-child,.s-textcontent>ul:last-child{margin-bottom:0}.s-textcontent>ul li{list-style-type:disc}.s-textcontent>ol li li,.s-textcontent>ul li li{padding-left:20px}.s-textcontent img{display:block}@media (max-width:63.99em){.s-textcontent img{max-width:100%;height:auto}}.s-textcontent iframe{width:100%}.is-page-loading *{transition:none!important}.u-link,.u-link-button{color:#ee2d29;text-decoration:none}.u-link-button{border:none;background:none;box-shadow:none;padding:0}.c-edit-link{position:fixed;top:1em;left:1em;opacity:0}.c-edit-link:hover{opacity:1}*,h1,h2,h3,h4,h5,h6{font-family:Open Sans,sans-serif}html{font-size:10px}body{background:#f2f3f6;overflow:hidden}.flex{display:-ms-flexbox;display:flex}.relative{position:relative}.left{float:left}.right{float:right}.clear{clear:both}.padding_left-none{padding-left:0}.padding_right-none{padding-right:0}.align-center{text-align:center}.show{display:block!important}.show-mobile{display:none!important}#configurator .content-configurator{transition:.5s;-ms-transform:translateX(-41.5rem);transform:translateX(-41.5rem);overflow:hidden}#configurator .content-configurator #menu_sx{position:relative;float:left;width:41.5rem}#configurator .content-configurator #menu_sx .content-menu_sx{position:relative;width:37.5rem;background:#fff;border-top-right-radius:10rem;border-bottom-right-radius:1rem}#configurator .content-configurator #menu_sx .content-menu_sx .step{display:inline-block;overflow:hidden;margin-left:2rem;margin-top:2rem;margin-bottom:1.6rem}#configurator .content-configurator #menu_sx .content-menu_sx .step li{position:relative;float:left;width:3.3rem;height:3.3rem;background:#fff;border:1px solid #bfc7d7;border-radius:100%;font-size:1.4rem;font-weight:600;letter-spacing:.4px;margin-right:3rem}#configurator .content-configurator #menu_sx .content-menu_sx .step li:after{position:absolute;top:16px;left:32px;content:"";width:3.2rem;height:1px;background:#bfc7d7}#configurator .content-configurator #menu_sx .content-menu_sx .step li.active{background:#56a6fb;border:1px solid #56a6fb;color:#fff}#configurator .content-configurator #menu_sx .content-menu_sx .step li.active:after{background:#56a6fb}#configurator .content-configurator #menu_sx .content-menu_sx .step li:last-child:after{display:none}#configurator .content-configurator #menu_sx .content-menu_sx .step li span{position:relative;top:5px;left:12px;color:#bfc7d7}#configurator .content-configurator #menu_sx .content-menu_sx .content-steps [data-step]{display:none}#configurator .content-configurator #menu_sx .content-menu_sx .content-steps [data-step][data-step="1"]{display:block}#configurator .content-configurator #menu_sx .content-menu_sx .title-configura{display:inline-block;font-size:1.3rem;font-weight:600;letter-spacing:.4px;text-transform:uppercase;border-bottom:1px solid #e1e6ee;color:#56a6fb;padding-right:4rem;padding-bottom:1.5rem;margin-left:2rem;margin-bottom:1.5rem}#configurator .content-configurator #menu_sx .content-menu_sx .title-section{font-size:2rem;font-weight:600;letter-spacing:.5px;color:#5757d2;margin-left:2rem;margin-bottom:2.5rem}#configurator .content-configurator #menu_sx .content-menu_sx .scroll{overflow-y:auto}#configurator .content-configurator #menu_sx .content-menu_sx .selection_menu{margin-left:1rem}#configurator .content-configurator #menu_sx .content-menu_sx .selection_menu li{width:28rem;padding:1.8rem 2rem;border-radius:5px;background-color:#f2f3f6;font-size:1.6rem;letter-spacing:.5px;color:#5757d2;margin-bottom:.5rem;cursor:pointer}#configurator .content-configurator #menu_sx .content-menu_sx .selection_menu li.active{background-color:#5757d2;color:#fff}#configurator .content-configurator #menu_sx .content-menu_sx .buttons-step{position:absolute;bottom:.5rem;left:0;width:100%;height:8.8rem;border-top:.3rem solid #f2f3f6;border-bottom-right-radius:1rem;background:#fff}#configurator .content-configurator #menu_sx .content-menu_sx .buttons-step .back-step{display:inline-block;float:left;font-size:2rem;color:#98a3b6;margin-top:3rem;margin-left:3.6rem}#configurator .content-configurator #menu_sx .content-menu_sx .buttons-step .next-step{position:relative;right:-3.5rem;display:inline-block;float:right;width:14.5rem;height:5.6rem;border-radius:2.8rem;background-color:#d4d8e4;box-shadow:0 0 12px 0 rgba(0,0,0,.12);padding-left:2.5rem;padding-top:1.6rem;margin-top:1.7rem;font-size:1.4rem;font-weight:600;letter-spacing:.5px;color:#fff}#configurator .content-configurator #menu_sx .content-menu_sx .buttons-step .next-step.active{background-color:#56a6fb}#configurator .content-configurator #content_page{position:relative;float:left;transition:.5s}.top-section{padding-top:3rem}.top-section .info-right{position:absolute;top:3rem;right:3.5rem}.top-section .logo{position:absolute;top:3rem;left:50%;-ms-transform:translateX(-50%);transform:translateX(-50%)}.top-section .toggle_menu_sx{display:inline-block;cursor:pointer;margin-left:2rem}.circle-step{position:absolute;top:12rem;right:-.7rem;z-index:1}.circle-step li{position:relative;width:1rem;height:1rem;background:#c4cad8;border-radius:100%;margin-bottom:6.7rem}.circle-step li.active{width:1.2rem;height:1.2rem;background:#5757d2}.circle-step li.active:before{content:"";position:absolute;top:-.6rem;left:-.6rem;width:2.4rem;height:2.4rem;background:rgba(87,87,210,.3);border-radius:100%}.detail-pack{position:absolute;bottom:0;left:0;z-index:10}.detail-pack .quantity-pack{float:left;background:#fff}.detail-pack .quantity-pack>div{width:37.5rem;height:9rem;background:#5757d2;border-top-right-radius:1rem;padding:0 5.2rem}.detail-pack .quantity-pack>div .quantity-left{float:left;width:14.5rem}.detail-pack .quantity-pack>div .quantity-right{float:left;margin-left:2.4rem}.detail-pack .quantity-pack>div .quantity-title{font-size:1.4rem;letter-spacing:.6px;color:#fff;padding-top:1.7rem;margin-bottom:2.5rem}.detail-pack .quantity-pack>div .slider{height:.3rem;background-color:hsla(0,0%,100%,.41);border-radius:.3rem;margin:0}.detail-pack .quantity-pack>div .slider-fill{height:.3rem;background-color:#fff;border-radius:.3rem}.detail-pack .quantity-pack>div .slider-handle{width:1.9rem;height:1.9rem;background-color:#fff;border-radius:100%}.detail-pack .quantity-pack>div .quantity-selection{float:right;font-size:3.6rem;letter-spacing:1.5px;color:#fff;line-height:100%;margin-top:3.1rem}.detail-pack .price-pack{float:left;width:60.5rem;height:9rem;background:#fff;border-top-right-radius:50px}.detail-pack .price-pack .total-price{float:right;margin-right:2rem}.detail-pack .price-pack .total-price h5{margin-top:.8rem;margin-bottom:.5rem;font-size:2.4rem;font-weight:600;letter-spacing:.7px;text-align:right;color:#5757d2}.detail-pack .price-pack .total-price p{font-size:1.2rem;letter-spacing:.5px;text-align:right;line-height:1.5rem;color:#8891a2}.detail-pack .price-pack .add-to-cart{position:relative;right:-5rem;float:right;width:26rem;padding:1.7rem 0;padding-left:5rem;border-radius:3rem;background-image:linear-gradient(283deg,#d4d9e5,#aeb8ca);box-shadow:0 0 12px 0 rgba(152,163,182,.3);margin-top:1.5rem;font-size:1.6rem;letter-spacing:.6px;color:#fff}.button-blu{position:absolute;bottom:1.5rem;right:1.5rem;width:5.6rem;height:5.6rem;border-radius:1rem;border-bottom-right-radius:0;background-color:#5757d2}.button-blu span{position:relative;top:.3rem;display:inline-block;width:3rem;height:3rem;border:1px solid #fff;border-radius:100%}#obj-canvas{background:#f2f3f6}.zoom-right{position:absolute;top:50%;right:2rem;-ms-transform:translateY(-50%);transform:translateY(-50%)}.zoom-right>div{font-size:4rem;color:#98a3b6;cursor:pointer}.zoom-bottom{position:absolute;bottom:4.5rem;left:50%;-ms-transform:translate(-50%);transform:translate(-50%)}.zoom-bottom .zoom-slider{-webkit-appearance:none;border:0 solid #fff;width:30rem}.zoom-bottom .zoom-slider::-webkit-slider-runnable-track{width:30rem;height:.2rem;background:#e1e6ee;border:none;border-radius:.1rem}.zoom-bottom .zoom-slider::-webkit-slider-thumb{-webkit-appearance:none;width:6rem;height:3.5rem;background-color:#fff;border:none;border-radius:1.75rem;box-shadow:0 0 12px 0 rgba(152,163,182,.3);margin-top:-16px;cursor:pointer}.zoom-bottom .zoom-slider::-moz-range-track{width:30rem;height:.2rem;background:#e1e6ee;border:none;border-radius:.1rem}.zoom-bottom .zoom-slider::-moz-range-thumb{width:6rem;height:3.5rem;background-color:#fff;border:none;border-radius:1.75rem;box-shadow:0 0 12px 0 rgba(152,163,182,.3);margin-top:-16px;cursor:pointer}.zoom-bottom .zoom-slider:focus{outline:none}.zoom-bottom .zoom-slider:-moz-focusring{outline:1px solid #fff;outline-offset:-1px}.zoom-bottom .zoom-slider::-ms-track{width:30rem;height:.14rem;border:none;border-radius:.1rem;background:transparent;border-color:transparent;color:transparent;padding:1.2rem 0}.zoom-bottom .zoom-slider::-ms-fill-lower,.zoom-bottom .zoom-slider::-ms-fill-upper{background:#e1e6ee;border-radius:.1rem}.zoom-bottom .zoom-slider:focus::-ms-fill-lower,.zoom-bottom .zoom-slider:focus::-ms-fill-upper{background:#e1e6ee}.zoom-bottom .zoom-slider::-ms-thumb{width:3.7rem;height:2.2rem;background-color:#fff;border:none;border-radius:1.75rem;box-shadow:0 0 12px 0 rgba(152,163,182,.3);margin-top:-2px;cursor:pointer}
/*# sourceMappingURL=data:application/json;charset=utf8;base64, */
